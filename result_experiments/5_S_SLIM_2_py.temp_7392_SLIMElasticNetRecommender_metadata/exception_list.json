["Traceback (most recent call last):\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 464, in _objective_function\n    result_df, recommender_instance = self._evaluate_on_validation(current_fit_hyperparameters_dict, was_already_evaluated_flag, was_already_evaluated_index)\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 332, in _evaluate_on_validation\n    recommender_instance, train_time = self._fit_model(current_fit_hyperparameters)\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 304, in _fit_model\n    recommender_instance.fit(*self.recommender_input_args.FIT_POSITIONAL_ARGS,\n  File \"../RecSysRep\\Recommenders\\SLIM\\SLIMElasticNetRecommender.py\", line 252, in fit\n    with Pool(processes=self.workers) as pool:\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\context.py\", line 119, in Pool\n    return Pool(processes, initializer, initargs, maxtasksperchild,\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 212, in __init__\n    self._repopulate_pool()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 303, in _repopulate_pool\n    return self._repopulate_pool_static(self._ctx, self.Process,\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 326, in _repopulate_pool_static\n    w.start()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\process.py\", line 121, in start\n    self._popen = self._Popen(self)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\context.py\", line 327, in _Popen\n    return Popen(process_obj)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\popen_spawn_win32.py\", line 45, in __init__\n    prep_data = spawn.get_preparation_data(process_obj._name)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\spawn.py\", line 154, in get_preparation_data\n    _check_not_importing_main()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\spawn.py\", line 134, in _check_not_importing_main\n    raise RuntimeError('''\nRuntimeError: \n        An attempt has been made to start a new process before the\n        current process has finished its bootstrapping phase.\n\n        This probably means that you are not using fork to start your\n        child processes and you have forgotten to use the proper idiom\n        in the main module:\n\n            if __name__ == '__main__':\n                freeze_support()\n                ...\n\n        The \"freeze_support()\" line can be omitted if the program\n        is not going to be frozen to produce an executable.\n", "Traceback (most recent call last):\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 464, in _objective_function\n    result_df, recommender_instance = self._evaluate_on_validation(current_fit_hyperparameters_dict, was_already_evaluated_flag, was_already_evaluated_index)\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 332, in _evaluate_on_validation\n    recommender_instance, train_time = self._fit_model(current_fit_hyperparameters)\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 304, in _fit_model\n    recommender_instance.fit(*self.recommender_input_args.FIT_POSITIONAL_ARGS,\n  File \"../RecSysRep\\Recommenders\\SLIM\\SLIMElasticNetRecommender.py\", line 252, in fit\n    with Pool(processes=self.workers) as pool:\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\context.py\", line 119, in Pool\n    return Pool(processes, initializer, initargs, maxtasksperchild,\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 212, in __init__\n    self._repopulate_pool()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 303, in _repopulate_pool\n    return self._repopulate_pool_static(self._ctx, self.Process,\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 326, in _repopulate_pool_static\n    w.start()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\process.py\", line 121, in start\n    self._popen = self._Popen(self)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\context.py\", line 327, in _Popen\n    return Popen(process_obj)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\popen_spawn_win32.py\", line 45, in __init__\n    prep_data = spawn.get_preparation_data(process_obj._name)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\spawn.py\", line 154, in get_preparation_data\n    _check_not_importing_main()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\spawn.py\", line 134, in _check_not_importing_main\n    raise RuntimeError('''\nRuntimeError: \n        An attempt has been made to start a new process before the\n        current process has finished its bootstrapping phase.\n\n        This probably means that you are not using fork to start your\n        child processes and you have forgotten to use the proper idiom\n        in the main module:\n\n            if __name__ == '__main__':\n                freeze_support()\n                ...\n\n        The \"freeze_support()\" line can be omitted if the program\n        is not going to be frozen to produce an executable.\n", "Traceback (most recent call last):\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 464, in _objective_function\n    result_df, recommender_instance = self._evaluate_on_validation(current_fit_hyperparameters_dict, was_already_evaluated_flag, was_already_evaluated_index)\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 332, in _evaluate_on_validation\n    recommender_instance, train_time = self._fit_model(current_fit_hyperparameters)\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 304, in _fit_model\n    recommender_instance.fit(*self.recommender_input_args.FIT_POSITIONAL_ARGS,\n  File \"../RecSysRep\\Recommenders\\SLIM\\SLIMElasticNetRecommender.py\", line 252, in fit\n    with Pool(processes=self.workers) as pool:\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\context.py\", line 119, in Pool\n    return Pool(processes, initializer, initargs, maxtasksperchild,\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 212, in __init__\n    self._repopulate_pool()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 303, in _repopulate_pool\n    return self._repopulate_pool_static(self._ctx, self.Process,\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 326, in _repopulate_pool_static\n    w.start()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\process.py\", line 121, in start\n    self._popen = self._Popen(self)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\context.py\", line 327, in _Popen\n    return Popen(process_obj)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\popen_spawn_win32.py\", line 45, in __init__\n    prep_data = spawn.get_preparation_data(process_obj._name)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\spawn.py\", line 154, in get_preparation_data\n    _check_not_importing_main()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\spawn.py\", line 134, in _check_not_importing_main\n    raise RuntimeError('''\nRuntimeError: \n        An attempt has been made to start a new process before the\n        current process has finished its bootstrapping phase.\n\n        This probably means that you are not using fork to start your\n        child processes and you have forgotten to use the proper idiom\n        in the main module:\n\n            if __name__ == '__main__':\n                freeze_support()\n                ...\n\n        The \"freeze_support()\" line can be omitted if the program\n        is not going to be frozen to produce an executable.\n", "Traceback (most recent call last):\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 464, in _objective_function\n    result_df, recommender_instance = self._evaluate_on_validation(current_fit_hyperparameters_dict, was_already_evaluated_flag, was_already_evaluated_index)\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 332, in _evaluate_on_validation\n    recommender_instance, train_time = self._fit_model(current_fit_hyperparameters)\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 304, in _fit_model\n    recommender_instance.fit(*self.recommender_input_args.FIT_POSITIONAL_ARGS,\n  File \"../RecSysRep\\Recommenders\\SLIM\\SLIMElasticNetRecommender.py\", line 252, in fit\n    with Pool(processes=self.workers) as pool:\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\context.py\", line 119, in Pool\n    return Pool(processes, initializer, initargs, maxtasksperchild,\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 212, in __init__\n    self._repopulate_pool()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 303, in _repopulate_pool\n    return self._repopulate_pool_static(self._ctx, self.Process,\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 326, in _repopulate_pool_static\n    w.start()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\process.py\", line 121, in start\n    self._popen = self._Popen(self)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\context.py\", line 327, in _Popen\n    return Popen(process_obj)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\popen_spawn_win32.py\", line 45, in __init__\n    prep_data = spawn.get_preparation_data(process_obj._name)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\spawn.py\", line 154, in get_preparation_data\n    _check_not_importing_main()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\spawn.py\", line 134, in _check_not_importing_main\n    raise RuntimeError('''\nRuntimeError: \n        An attempt has been made to start a new process before the\n        current process has finished its bootstrapping phase.\n\n        This probably means that you are not using fork to start your\n        child processes and you have forgotten to use the proper idiom\n        in the main module:\n\n            if __name__ == '__main__':\n                freeze_support()\n                ...\n\n        The \"freeze_support()\" line can be omitted if the program\n        is not going to be frozen to produce an executable.\n", "Traceback (most recent call last):\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 464, in _objective_function\n    result_df, recommender_instance = self._evaluate_on_validation(current_fit_hyperparameters_dict, was_already_evaluated_flag, was_already_evaluated_index)\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 332, in _evaluate_on_validation\n    recommender_instance, train_time = self._fit_model(current_fit_hyperparameters)\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 304, in _fit_model\n    recommender_instance.fit(*self.recommender_input_args.FIT_POSITIONAL_ARGS,\n  File \"../RecSysRep\\Recommenders\\SLIM\\SLIMElasticNetRecommender.py\", line 252, in fit\n    with Pool(processes=self.workers) as pool:\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\context.py\", line 119, in Pool\n    return Pool(processes, initializer, initargs, maxtasksperchild,\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 212, in __init__\n    self._repopulate_pool()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 303, in _repopulate_pool\n    return self._repopulate_pool_static(self._ctx, self.Process,\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 326, in _repopulate_pool_static\n    w.start()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\process.py\", line 121, in start\n    self._popen = self._Popen(self)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\context.py\", line 327, in _Popen\n    return Popen(process_obj)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\popen_spawn_win32.py\", line 45, in __init__\n    prep_data = spawn.get_preparation_data(process_obj._name)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\spawn.py\", line 154, in get_preparation_data\n    _check_not_importing_main()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\spawn.py\", line 134, in _check_not_importing_main\n    raise RuntimeError('''\nRuntimeError: \n        An attempt has been made to start a new process before the\n        current process has finished its bootstrapping phase.\n\n        This probably means that you are not using fork to start your\n        child processes and you have forgotten to use the proper idiom\n        in the main module:\n\n            if __name__ == '__main__':\n                freeze_support()\n                ...\n\n        The \"freeze_support()\" line can be omitted if the program\n        is not going to be frozen to produce an executable.\n", "Traceback (most recent call last):\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 464, in _objective_function\n    result_df, recommender_instance = self._evaluate_on_validation(current_fit_hyperparameters_dict, was_already_evaluated_flag, was_already_evaluated_index)\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 332, in _evaluate_on_validation\n    recommender_instance, train_time = self._fit_model(current_fit_hyperparameters)\n  File \"../RecSysRep\\HyperparameterTuning\\SearchAbstractClass.py\", line 304, in _fit_model\n    recommender_instance.fit(*self.recommender_input_args.FIT_POSITIONAL_ARGS,\n  File \"../RecSysRep\\Recommenders\\SLIM\\SLIMElasticNetRecommender.py\", line 252, in fit\n    with Pool(processes=self.workers) as pool:\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\context.py\", line 119, in Pool\n    return Pool(processes, initializer, initargs, maxtasksperchild,\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 212, in __init__\n    self._repopulate_pool()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 303, in _repopulate_pool\n    return self._repopulate_pool_static(self._ctx, self.Process,\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\pool.py\", line 326, in _repopulate_pool_static\n    w.start()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\process.py\", line 121, in start\n    self._popen = self._Popen(self)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\context.py\", line 327, in _Popen\n    return Popen(process_obj)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\popen_spawn_win32.py\", line 45, in __init__\n    prep_data = spawn.get_preparation_data(process_obj._name)\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\spawn.py\", line 154, in get_preparation_data\n    _check_not_importing_main()\n  File \"C:\\Users\\marti\\miniconda3\\envs\\RecSys\\lib\\multiprocessing\\spawn.py\", line 134, in _check_not_importing_main\n    raise RuntimeError('''\nRuntimeError: \n        An attempt has been made to start a new process before the\n        current process has finished its bootstrapping phase.\n\n        This probably means that you are not using fork to start your\n        child processes and you have forgotten to use the proper idiom\n        in the main module:\n\n            if __name__ == '__main__':\n                freeze_support()\n                ...\n\n        The \"freeze_support()\" line can be omitted if the program\n        is not going to be frozen to produce an executable.\n", null, null, null, null, null, null, null, null, null, null, null, null, null, null]